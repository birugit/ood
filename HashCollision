public class HashCollision<Cell<K,V>>{
    private final int MAX_SIZE = 10;
    LinkedList<Cell<K, V>>[] items;
    public HashCollision(){
      item =  (LinkedList<Cell<K,V>>[]) new LinkedList[MAX_SIZE];
    }
    //bad hasing
    public int hashCodeOfLength(K key){
    return key.toString().length() % items.length;
    }
  public void put(K, V){
    int x = hashCodeOfLength(K);
    if(items[x] == null){
      items[x] = new LinkedList(Cell<K, V>);
    }
    LinkedList<Cell<K,V>> collided = items[x];
    for(Cell<K,V> c: collided)[
      if(c.equivalent(key)){
        collided.remove(c);
        break;
      }
    }
    Cell<K,V> cell = new Cell<K,V>(key, value);
    collided.add(cell);
  }
  
  public V get(K key){
      int x = hashCodeOfLength(key);
      if(items[x] == null){
        return null;
      }
      LinkedList<Cell<K,V>> collided = items[x];
      for(Cell<K,V> c: collided){
        if(c.equivalent(key)){
          return c.getValue();
        }
      }
    return null;
  }

public static void main(String arg[]){

  HashCollision<String,String> h = new HashCollision<String,String>();
  h.put("sam", "Sam");
  h.put("Ran","Ran");
  h.put("tams", "Tams");
  
  System.out.println(h.get("sam"));
  System.out.println(h.get("Ran"));
  System.out.println(h.get("tams"));
  
  }
  
  private class Cell<K,V>{
    private String K key;
    private String V value;
    
    Cell(K key, V value){
      this.key = key;
      this.value = value;
    }
  
  pubic boolean equivalent(Cell<K,V> c){
    return equivalent(c.getKey());
  }
  public boolean equivalent(K k)
    return key.equals(k);
  }
  public K getKey(){
    return key;
  }
  public V getValue(){
  return value;
  }
  }
}
